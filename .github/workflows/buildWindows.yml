# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Build on Windows

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: windows-latest
    name: Cmake VS 17 2022

    env:
      BUILD_SYS: Visual Studio 17 2022
      BUILD_DIR: build
    
    
    steps:
    - name: Machine Info
      shell: powershell
      run: |
        systeminfo | findstr /B /C:"OS Name" /B /C:"OS Version"

    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: windows-latest

    - name: Install NuGet Packages
      shell: powershell
      run: |
        nuget install PCRE2 -OutputDirectory C:\Tools
        nuget install Bison -OutputDirectory C:\Tools

    # https://cygwin.com/cygwin-ug-net/cygpath.html
    - name: Prepare Environment
      shell: bash
      run: |
          cat << EOF >> $GITHUB_ENV
          PCRE2_PATH=$(cygpath -w "$(ls -d /C/Tools/PCRE2*)")
          EOF
          BISON_PATH=$(cygpath -w "$(ls -d /C/Tools/Bison*)/bin")
          echo "$BISON_PATH" >> $GITHUB_PATH

    - name: Configure
      shell: powershell
      run: |
        cmake --version
        cmake -B "$env:BUILD_DIR" -G "$env:BUILD_SYS" -A x64
      # -DLINK_FLAGS="/NODEFAULTLIB:MSVCRT" -S . -B .
      # -DCMAKE_INSTALL_PREFIX="C:\Tools\swig" `

    - name: Build
      shell: powershell
      run: |
          cmake --build "$env:BUILD_DIR" --config Release
          
    - name: Debug - Check DLL existence
      if: ${{ always() }}
      shell: cmd
      run: |
        dir D:\a\BotteDisqueCorde\BotteDisqueCorde\
        echo --------------------------------------------------------------
        dir D:\a\BotteDisqueCorde\BotteDisqueCorde\build\
        echo --------------------------------------------------------------
        dir D:\a\BotteDisqueCorde\BotteDisqueCorde\build\Externals\
        echo --------------------------------------------------------------
        dir D:\a\BotteDisqueCorde\BotteDisqueCorde\build\Externals\DPP\
        echo --------------------------------------------------------------
        dir D:\a\BotteDisqueCorde\BotteDisqueCorde\build\Externals\DPP\library\
        echo --------------------------------------------------------------
        dir D:\a\BotteDisqueCorde\BotteDisqueCorde\build\Externals\DPP\library\Release\

    
    - name: Test
      shell: powershell
      run: |
          ctest --test-dir build --output-on-failure -C Release
          
    # - name: Install
    #   shell: powershell
    #   run: |
    #     cmake --install .
    #     C:\Tools\swig\bin\swig.exe -version

          
    #- name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      #run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

   # - name: Build
      # Build your program with the given configuration
   #   run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  #  - name: Test
  #    working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
  #    run: ctest -C ${{env.BUILD_TYPE}}

