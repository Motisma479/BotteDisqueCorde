name: Cross-Platform Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        include:
          - os: ubuntu-latest
            build_type: Release
            c_compiler: gcc
            cpp_compiler: g++
            generator: "Unix Makefiles"

          - os: ubuntu-latest
            build_type: Release
            c_compiler: clang
            cpp_compiler: clang++
            generator: "Unix Makefiles"

          - os: windows-latest
            build_type: Release
            generator: "Visual Studio 17 2022"
            arch: x64

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Set build directory
      id: vars
      shell: bash
      run: echo "BUILD_DIR=${{ github.workspace }}/build" >> "$GITHUB_ENV"

    # ── Ubuntu: install system libcurl ───────────────────────────────────────────
    - name: Install libcurl (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libcurl4-openssl-dev

    # ── Windows: bootstrap vcpkg + install curl ─────────────────────────────────
    - name: Bootstrap vcpkg & install curl (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
        .\vcpkg\vcpkg install curl[ssl] --triplet x64-windows-static

    - name: Configure CMake
      shell: bash
      run: |
        cmake -B "$BUILD_DIR" \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          ${{ matrix.c_compiler && format('-DCMAKE_C_COMPILER={0}', matrix.c_compiler) || '' }} \
          ${{ matrix.cpp_compiler && format('-DCMAKE_CXX_COMPILER={0}', matrix.cpp_compiler) || '' }} \
          -G "${{ matrix.generator }}" \
          ${{ matrix.arch && format('-A {0}', matrix.arch) || '' }} \
          -DBUILD_SHARED_LIBS=OFF \
          -DCURL_USE_STATIC_LIBS=ON \
          ${{ runner.os == 'Windows' && format('-DCMAKE_TOOLCHAIN_FILE={0}/vcpkg/scripts/buildsystems/vcpkg.cmake', github.workspace) || '' }} \
          ${{ runner.os == 'Windows' && '-DVCPKG_TARGET_TRIPLET=x64-windows-static' || '' }} \
          -S "${{ github.workspace }}"

    - name: Build
      shell: bash
      run: |
        cmake --build "$BUILD_DIR" --config ${{ matrix.build_type }}

    - name: Run Tests
      shell: bash
      run: |
        ctest --test-dir "$BUILD_DIR" --output-on-failure -C ${{ matrix.build_type }}

  build-and-deploy:
    if: contains(github.event.head_commit.message, '[sendToServer]')
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release

      - name: Build project
        run: cmake --build ${{github.workspace}}/build --config Release

      - name: Save build date and time
        run: |
          date "+Build date: %Y-%m-%d %H:%M:%S UTC" > build/buildInformation
      
      - name: Transfer artifacts to server # transfer the build to the server
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          TARGET: /home/deploy/BotteDisqueCorde_install
          SOURCE: build

      - name: Restart systemd service
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo systemctl restart botteDisqueCorde.service  # Replace with your service name
